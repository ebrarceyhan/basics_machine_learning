import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error

def load_data(file_path):
    """Loads the CSV file and selects necessary columns."""
    teams = pd.read_csv(file_path)
    teams = teams[["team", "country", "year", "athletes", "age", "prev_medals", "medals"]]
    return teams

def explore_data(teams):
    """Analyzes the dataset and generates basic visualizations."""
    print("Correlation Matrix:")
    print(teams.corr()["medals"])
    
    sns.lmplot(x="athletes", y="medals", data=teams, fit_reg=True, ci=None)
    sns.lmplot(x="age", y="medals", data=teams, ci=None, fit_reg=True)
    teams.plot.hist(y="medals")
    plt.show()

def preprocess_data(teams):
    """Cleans missing data and splits the dataset into training and test sets."""
    teams = teams.dropna()
    train = teams[teams["year"] < 2012].copy()
    test = teams[teams["year"] >= 2012].copy()
    return train, test

def train_model(train):
    """Trains a linear regression model."""
    predictors = ["athletes", "prev_medals"]
    target = "medals"
    reg = LinearRegression()
    reg.fit(train[predictors], train[target])
    return reg, predictors

def evaluate_model(reg, test, predictors):
    """Evaluates the model's performance on the test dataset."""
    predictions = reg.predict(test[predictors])
    test["predictions"] = predictions
    test.loc[test["predictions"] < 0, "predictions"] = 0
    test["predictions"] = test["predictions"].round()
    error = mean_absolute_error(test["medals"], test["predictions"])
    print("Mean Absolute Error:", error)
    return test

def analyze_errors(test):
    """Performs error analysis per team."""
    errors = (test["medals"] - test["predictions"]).abs()
    errors_by_team = errors.groupby(test["team"]).mean()
    medals_by_team = test["medals"].groupby(test["team"]).mean()
    error_ratio = errors_by_team / medals_by_team
    error_ratio = error_ratio[np.isfinite(error_ratio)]
    error_ratio.plot.hist()
    plt.show()
    return error_ratio

if __name__ == "__main__":
    teams = load_data("teams.csv")
    explore_data(teams)
    train, test = preprocess_data(teams)
    reg, predictors = train_model(train)
    test = evaluate_model(reg, test, predictors)
    error_ratio = analyze_errors(test)
    print("Error Ratio:")
    print(error_ratio.sort_values())
